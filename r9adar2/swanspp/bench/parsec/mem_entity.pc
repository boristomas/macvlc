//////////////////////////////////////////////////
// JIST (Java In Simulation Time) Project
// Timestamp: <mem_entity.pc Thu 2003/04/24 09:54:19 barr pompom.cs.cornell.edu>
//
// Author: Rimon Barr <barr+jist@cs.cornell.edu>
//

/**
 * This application measures MEMORY overhead of an ENTITY
 * in Parsec. This program just creates a whole bunch of
 * entities, measures the memory consumed, and then cleans
 * up. Conclusion: awful. Each entity requires its own stack
 * and takes up minimum of 20kB. Scalability limit around
 * 5000 entities (with considerable thrashing) on 128M RAM 
 * machine.
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <unistd.h>
#include <sys/resource.h>

void outputMemory()
{
  char buf[5000];
  FILE *f;
  int readbytes;

  f = fopen("/proc/self/status", "r");
  assert(f);
  readbytes = fread(buf, sizeof(char), 5000, f);
  fwrite(buf, sizeof(char), readbytes, stdout);
  fclose(f);
}

message finish
{
};

entity myEntity(int id, ename creator) 
{
  receive(finish f)
  {
  }
}

entity driver(int argc, char **argv) 
{
  ename *e;
  int i, num;
  struct rusage info;

  // command-line options
  if(argc<2)
  {
    printf("usage: mem_entity <entities>\n");
    exit(1);
  }
  num = atoi(argv[1]);

  // fire-up all entities
  e = malloc(num*sizeof(ename));
  for(i=0; i<num; i++)
  {
    e[i] = new myEntity(i, self);
  }

  // output system resources
  outputMemory();

  // shutdown all entities
  for(i=0; i<num; i++)
  {
    send finish
    {
    } to e[i];
  }

  // remove usual parsec output
  exit(1);
}
